#!/usr/bin/perl
# vim:ft=perl:et:

use vars qw($VERSION);
my $APP  = 'time-spent-in-vim';
$VERSION = '0.156';

use strict;
use Cwd qw(abs_path);
use Carp qw/croak/;
use Storable;
use Pod::Usage;
use Getopt::Long;
use Time::localtime;
use Term::ExtendedColor qw(fg);
use File::LsColor qw(ls_color);
use File::Basename;

# set $EDITOR to this wrapper
my $editor  = '/usr/bin/vim';
my $history = "$ENV{XDG_DATA_HOME}/time_spent_in_vim.db";

my $opt_get_stats;
GetOptions(
  't|total'  => \$opt_get_stats,
  'h|help' => sub { pod2usage( verbose => 1 ); },
);

my @files = @ARGV;
my @vim_args;

for my $file(@files) {
  if(
      ($file =~ m{ ^(?: (?:ht|f)tps?://) }x )
        ||
      ($file =~ m{ ^([ls]et) }x and !-f $1)
    ) {
    system($editor, @files);
    exit;
  }
  if( (! -e $file) and ($file =~ /^-/) ) {
    push(@vim_args, $file);
    undef($file);
  }
}

@files = map { abs_path($_) } @files;

if($opt_get_stats)  {
  get_statistics( @files );
  exit 0;
}

my $elapsed_time = vim();
write_struct( get_struct(), $elapsed_time, @files );

output_term( format_time($elapsed_time), join(' ', @files) );

get_statistics(@files);

sub get_statistics {
  my @f = @_;

  my $s = get_struct();

  my $counter = 0;
  if(!@f) {
    for my $file(sort{ $s->{$b} <=> $s->{$a} } keys(%{$s})) {
      #return if $counter == 10;
      my($d, $h, $m, $s) = format_time( $s->{$file} );
      output_term($d, $h, $m, $s, $file, $counter);
      $counter++;
    }
    return;
  }
  $counter = 0;

  for my $file(@f) {
    return if $counter == 10;
    my($d, $h, $m, $s) = format_time( $s->{$file} );
    output_term($d, $h, $m, $s, $file, $counter);
    $counter++;
  }
}


sub format_time {
  my $time = shift;
  my $t = localtime($time);

  my($d, $h, $m, $s) = ($t->yday, $t->hour -1, $t->min, $t->sec);

  return ($d, $h, $m, $s);
}

sub color_by_value {
  my $value = shift;

  return fg('bold', fg('yellow1',  $value)) if $value < 2;
  return fg('bold', fg('yellow3',  $value)) if $value < 4;
  return fg('bold', fg('yellow5',  $value)) if $value < 6;
  return fg('bold', fg('yellow7',  $value)) if $value < 8;
  return fg('bold', fg('yellow9',  $value)) if $value < 10;
  return fg('bold', fg('yellow11', $value)) if $value < 12;
  return fg('bold', fg('yellow13', $value)) if $value < 14;
  return fg('bold', fg('yellow15', $value)) if $value < 16;
  return fg('bold', fg('yellow17', $value)) if $value < 18;
  return fg('bold', fg('yellow18', $value)) if $value < 20;
  return fg('bold', fg('orange5',  $value)) if $value < 22;
  return fg('bold', fg('red1',     $value)) if $value < 24;
  return fg('bold', fg('red2',     $value)) if $value < 26;
  return fg('bold', fg('red3',     $value)) if $value < 28;
  return fg('bold', fg('red4',     $value)) if $value < 30;
  return fg('bold', fg('red5',     $value)) if $value < 32;

  return $value;
}


sub vim {
  my $time_start = time();

  system($editor, @vim_args, @files);

  my $time_end   = time();
  my $time_spent = ($time_end - $time_start);

  return $time_spent;
}


sub write_struct {
  my($struct, $time, @files) = @_;

  #croak("'$struct' is not a valid HASH ref") if ref($struct) ne 'HASH';

  for my $file(@files) {
    if( ($file =~ /^\s+$/)
        or (!$file)
        or (!defined($file))
        or $file eq ''
        or $file =~ m/^(?:[sl]et)\s+/
        or $file =~ m/^[:-]+ ?/
        or $file =~ m/^bufdo/
    ) {
      next;
    }
    $struct->{$file} += $time;
    #if($time > 60) {
    #  $struct->{$file} += $time;
    #}
    #else {
    #  next;
    #}
  }
  store($struct, $history);
}

sub get_struct {
  my $struct;
  (-f $history) and (!-z $history) and $struct = retrieve($history);
  return $struct;
}


sub output_term {
  my($d, $h, $m, $s, $f, $counter) = @_;

  my(undef, undef, undef, $who) = caller(1);

  #return if ( ($d == 0) && ($h == 0) && ($m < 30) );

  if($d == 0) {
    print " " x 9;
  }
  else {
    printf("%s day%s",
      color_by_value( sprintf("% 3d", $d)),
      #fg('grey7', fg('bold', sprintf("% 3d", $d))),
      ( ($d > 1) or ($d == 0) ) ? 's,' : ', ',
    );
  }

  if($h == 0) {
    print " " x 10;
  }
  else {
    printf("%s hour%s",
      color_by_value( sprintf("% 3d", $h)),
      #fg('grey10', fg('bold', sprintf("% 3d", $h))),
      ( ($h > 1) or ($h == 0) ) ? 's,' : ', ',
    );
  }

  if($m == 0) {
    print " " x 10;
  }
  else {
    printf("%s minute%s%s",
      #color_by_value( sprintf("% 3d", $m)),
      fg('grey14', fg('bold', sprintf("% 3d", $m))),
      ( ($m == 1) ) ? ' ' : '',
      ( ($m > 1) or ($m == 0) )  ? 's and' : ' and',
    );
  }

  printf("%s%s second%s",
    #color_by_value( sprintf("% 3d", $s)),
    ($m == 0) ? '      ' : ' ',
    fg('grey17', fg('bold', sprintf("% 3d", $s))),
    ( ($s > 1 ) or ($s == 0) ) ? 's' : ' ',
  );


  if($who eq __PACKAGE__ . '::get_statistics') {
    chomp $f;
    printf(" @{[fg('italic', fg('grey10', ' spent on '))]} %s\n",
      ls_color(basename($f)),
    );
  }
  else {
    printf(" spent hacking on %s\n", ls_color(basename($f)));
  }

}


__END__

=pod

=head1 NAME

time-spent-in-vim - vim wrapper collecting statistics of the vim usage

=head1 USAGE

  export EDITOR='time-spent-in-vim'
  alias     vim='time-spent-in-vim

  vim [OPTIONS] FILES...

=head1 DESCRIPTION

B<time-spent-in-vim> is a Vim wrapper that collects time spent for each
project/file edited.

=head1 OPTIONS

  -t, --total   show a total summary of time spent

=head1 AUTHOR

  Magnus Woldrich
  CPAN ID: WOLDRICH
  m@japh.se
  http://japh.se

=head1 CONTRIBUTORS

None required yet.

=head1 COPYRIGHT

Copyright 2011, 2019- B<time-spent-in-vim>s L</AUTHOR> and
L</CONTRIBUTORS> as listed above.

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
